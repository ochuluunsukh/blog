name: Build and Deploy
on:
  [push, pull_request]
  # push:
  #   branches:
  #     - "main"
  #     - "dev"
  # pull_request:
  #   types:
  #     - review_requested

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: Install python version 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: update pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pytest
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Set the shell to exit immediately if any command fails
            set -e

            # --- CONFIGURATION ---
            # Your specific deployment directory
            DEPLOY_DIR="/home/ec2-user/projects/blog-api"
            # Your specific compose file name
            COMPOSE_FILE="docker-compose-prod.yml"
            # !!! IMPORTANT: Change 'api' to the service name in your COMPOSE_FILE
            SERVICE_NAME="blog-api-api-1"

            echo "--- Starting Deployment Sequence ---"
            echo "1. Checking directory access: $DEPLOY_DIR"
            cd $DEPLOY_DIR

            # 2. Pull the latest images from Docker Hub (or your registry)
            echo "2. Pulling latest Docker images defined in $COMPOSE_FILE..."
            docker-compose -f $COMPOSE_FILE pull

            # 3. Run Alembic Migrations inside a temporary container
            # This uses the LATEST pulled image for the 'api' service to run the migration.
            echo "3. Executing Alembic migrations on service: $SERVICE_NAME"
            docker-compose -f $COMPOSE_FILE run --rm $SERVICE_NAME alembic upgrade head

            # 4. Restart services
            # Stop and remove old containers, then start new ones with updated images/configs
            echo "4. Restarting Docker Compose services..."
            docker-compose -f $COMPOSE_FILE up -d --remove-orphans

            echo "--- Deployment Complete ---"
